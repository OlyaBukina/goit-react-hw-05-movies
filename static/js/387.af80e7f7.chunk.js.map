{"version":3,"file":"static/js/387.af80e7f7.chunk.js","mappings":"mWAEMA,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAiB,mCAAG,uGAEhBD,EAAAA,EAAAA,IAAA,qCAAwCD,IAFxB,8EAIvB,IAAIG,MAAM,+BAJa,wDAAH,qDAQjBC,EAAkB,mCAAG,WAAMC,GAAN,0FAEjBJ,EAAAA,EAAAA,IAAA,+BAAkCD,EAAlC,kBAAmDK,IAFlC,8EAIxB,IAAIF,MAAM,+BAJc,wDAAH,sDAQxB,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,gGAEiBN,EAAAA,EAAAA,IAAA,gBACTM,EADS,oBACUP,EADV,oBAFjB,cAEGQ,EAFH,yBAKIA,EAAMC,MALV,sCAOG,IAAIN,MAAM,+BAPb,gFAWA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAuBH,GAAvB,gGAEgBN,EAAAA,EAAAA,IAAA,gBAAmBM,EAAnB,4BAA8CP,IAF9D,cAEGW,EAFH,yBAGIA,EAAKF,KAAKE,MAHd,sCAKG,IAAIR,MAAM,+BALb,gFASA,SAAeS,EAAtB,+CAAO,OAAP,oBAAO,WAA0BL,GAA1B,gGAEmBN,EAAAA,EAAAA,IAAA,gBACXM,EADW,4BACgBP,IAHnC,cAEGa,EAFH,yBAKIA,EAAQJ,KAAKK,SALjB,sCAOG,IAAIX,MAAM,+BAPb,gFAWA,SAASY,EAAkBC,GAChC,GAAKA,EAAL,CAGA,IAAMC,GAAyB,GAAdD,GAAkBE,UACnC,MAAM,GAAN,OAAUD,EAAV,IAFC,CAGF,CAEM,SAASE,EAAUC,GACxB,GAAKA,EAIL,OADkBA,EAAOC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,KAExD,C,4KChEYC,EAAiBC,EAAAA,GAAAA,IAAH,uEAKdC,EAAcD,EAAAA,GAAAA,GAAH,mFAMXE,EAAcF,EAAAA,GAAAA,GAAH,oKAMXG,EAAeH,EAAAA,GAAAA,EAAH,wFAMZI,EAAgBJ,EAAAA,GAAAA,EAAH,4CAIbK,EAAgBL,EAAAA,GAAAA,EAAH,4C,SCmB1B,EAnCgB,WACd,OAA8BM,EAAAA,EAAAA,UAAS,IAAvC,eAAOnB,EAAP,KAAgBoB,EAAhB,KACQ1B,GAAY2B,EAAAA,EAAAA,MAAZ3B,QAeR,OAbA4B,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,mCAAG,uFACjB7B,EADiB,2EAGEK,EAAAA,EAAAA,IAAWL,GAHb,OAGdM,EAHc,OAIpBoB,EAAWpB,GAJS,gDAMpBwB,QAAQC,IAAR,MANoB,yDAAH,qDASrBF,GACD,GAAE,CAAC7B,KAGF,UAACkB,EAAD,WACsB,IAAnBZ,EAAQ0B,SACP,SAACR,EAAD,UAAe,4CAEhBlB,EAAQ0B,OAAS,IAChB,SAACZ,EAAD,UACGd,EAAQQ,KAAI,gBAAGmB,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,UAACd,EAAD,YACE,UAACC,EAAD,WAAc,WAASY,MACvB,SAACX,EAAD,UAAgBY,MAFAF,EADP,QAUtB,C","sources":["Api/fetchApi.js","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'c5a1db41bd5eb56af64be0ab647b8aee';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const getTrendingMovies = async () => {\n  try {\n    return await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  } catch (error) {\n    throw new Error('Oops, something goes wrong!');\n  }\n};\n\nexport const getMoviesByKeyword = async query => {\n  try {\n    return await axios.get(`search/movie?api_key=${API_KEY}&query=${query}`);\n  } catch (error) {\n    throw new Error('Oops, something goes wrong!');\n  }\n};\n\nexport async function getMovieById(movieId) {\n  try {\n    const movie = await axios.get(\n      `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n    return movie.data;\n  } catch (error) {\n    throw new Error('Oops, something goes wrong!');\n  }\n}\n\nexport async function getCast(movieId) {\n  try {\n    const cast = await axios.get(`movie/${movieId}/credits?api_key=${API_KEY}`);\n    return cast.data.cast;\n  } catch (error) {\n    throw new Error('Oops, something goes wrong!');\n  }\n}\n\nexport async function getReviews(movieId) {\n  try {\n    const reviews = await axios.get(\n      `movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    return reviews.data.results;\n  } catch (error) {\n    throw new Error('Oops, something goes wrong!');\n  }\n}\n\nexport function getPecentageValue(voteAverage) {\n  if (!voteAverage) {\n    return;\n  }\n  const percent = (voteAverage * 10).toFixed();\n  return `${percent}%`;\n}\n\nexport function getGenres(genres) {\n  if (!genres) {\n    return;\n  }\n  const allGenres = genres.map(genre => genre.name).join(', ');\n  return allGenres;\n}\n","import styled from 'styled-components';\n\nexport const ReviewsWrapper = styled.div`\n  padding-top: 15px;\n  padding-bottom: 15px;\n`;\n\nexport const ReviewsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n`;\n\nexport const ReviewsItem = styled.li`\n  padding: 5px 10px;\n  box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14),\n    0px 2px 1px rgba(0, 0, 0, 0.2);\n`;\n\nexport const ReviewAuthor = styled.p`\n  font-weight: 700;\n  font-size: 16px;\n  margin-bottom: 5px;\n`;\n\nexport const ReviewContent = styled.p`\n  font-size: 14px;\n`;\n\nexport const DefaultReview = styled.p`\n  font-size: 20px;\n`\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviews } from '../../Api/fetchApi';\n\nimport {\n  ReviewsWrapper,\n  ReviewsList,\n  ReviewsItem,\n  ReviewAuthor,\n  ReviewContent,\n  DefaultReview,\n} from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getMovieReviews = async () => {\n      if (!movieId) return;\n      try {\n        const reviews = await getReviews(movieId);\n        setReviews(reviews);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getMovieReviews();\n  }, [movieId]);\n\n  return (\n    <ReviewsWrapper>\n      {reviews.length === 0 && (\n        <DefaultReview>We don't have any reviews for this film</DefaultReview>\n      )}\n      {reviews.length > 0 && (\n        <ReviewsList>\n          {reviews.map(({ id, author, content }) => (\n            <ReviewsItem key={id}>\n              <ReviewAuthor>Author: {author}</ReviewAuthor>\n              <ReviewContent>{content}</ReviewContent>\n            </ReviewsItem>\n          ))}\n        </ReviewsList>\n      )}\n    </ReviewsWrapper>\n  );\n};\nexport default Reviews;\n"],"names":["API_KEY","axios","getTrendingMovies","Error","getMoviesByKeyword","query","getMovieById","movieId","movie","data","getCast","cast","getReviews","reviews","results","getPecentageValue","voteAverage","percent","toFixed","getGenres","genres","map","genre","name","join","ReviewsWrapper","styled","ReviewsList","ReviewsItem","ReviewAuthor","ReviewContent","DefaultReview","useState","setReviews","useParams","useEffect","getMovieReviews","console","log","length","id","author","content"],"sourceRoot":""}