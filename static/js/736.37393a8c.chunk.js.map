{"version":3,"file":"static/js/736.37393a8c.chunk.js","mappings":"mWAEMA,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAiB,mCAAG,WAAMC,GAAN,0FAEhBF,EAAAA,EAAAA,IAAA,sBAAiC,CAC5CG,OAAQ,CACNC,QAASL,EACTG,KAAAA,KALyB,8EASvB,IAAIG,MAAM,+BATa,wDAAH,sDAajBC,EAAkB,mCAAG,WAAOC,EAAOL,GAAd,0FAEjBF,EAAAA,EAAAA,IAAA,gBAA2B,CACtCG,OAAQ,CACNC,QAASL,EACTG,KAAAA,EACAK,MAAAA,KAN0B,8EAUxB,IAAIF,MAAM,+BAVc,wDAAH,wDAcxB,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,gGAEiBT,EAAAA,EAAAA,IAAA,gBACTS,EADS,oBACUV,EADV,oBAFjB,cAEGW,EAFH,yBAKIA,EAAMC,MALV,sCAOG,IAAIN,MAAM,+BAPb,gFAWA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAuBH,GAAvB,gGAEgBT,EAAAA,EAAAA,IAAA,gBAAmBS,EAAnB,4BAA8CV,IAF9D,cAEGc,EAFH,yBAGIA,EAAKF,KAAKE,MAHd,sCAKG,IAAIR,MAAM,+BALb,gFASA,SAAeS,EAAtB,+CAAO,OAAP,oBAAO,WAA0BL,GAA1B,gGAEmBT,EAAAA,EAAAA,IAAA,gBACXS,EADW,4BACgBV,IAHnC,cAEGgB,EAFH,yBAKIA,EAAQJ,KAAKK,SALjB,sCAOG,IAAIX,MAAM,+BAPb,gFAWA,SAASY,EAAkBC,GAChC,GAAKA,EAAL,CAGA,IAAMC,GAAyB,GAAdD,GAAkBE,UACnC,MAAM,GAAN,OAAUD,EAAV,IAFC,CAGF,CAEM,SAASE,EAAUC,GACxB,GAAKA,EAIL,OADkBA,EAAOC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,KAExD,C,0KC3EYC,EAAWC,EAAAA,GAAAA,GAAH,2HAORC,EAAWD,EAAAA,GAAAA,GAAH,qEAKRE,EAAcF,EAAAA,GAAAA,IAAH,oGAMXG,EAAYH,EAAAA,GAAAA,EAAH,uFAMTI,EAAiBJ,EAAAA,GAAAA,EAAH,qE,SCqB3B,EA/Ba,WACX,OAAwBK,EAAAA,EAAAA,UAAS,IAAjC,eAAOpB,EAAP,KAAaqB,EAAb,KACQzB,GAAY0B,EAAAA,EAAAA,MAAZ1B,QAcR,OAZA2B,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,uFACd5B,EADc,2EAGEG,EAAAA,EAAAA,IAAQH,GAHV,OAGXI,EAHW,OAIjBqB,EAAQrB,GAJS,gDAMjByB,QAAQC,IAAR,MANiB,yDAAH,qDASlBF,GACD,GAAE,CAAC5B,KAEF,SAACkB,EAAD,UACGd,EAAKU,KAAI,gBAAGiB,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAchB,EAArB,EAAqBA,KAAMiB,EAA3B,EAA2BA,UAA3B,OACR,UAACb,EAAD,YACE,SAACC,EAAD,CACEa,IAAKF,EAAY,UAzBX,mCAyBW,OAAkBA,GAvB7C,4JAwBUG,IAAI,YAEN,SAACb,EAAD,UAAYN,KACZ,UAACO,EAAD,WAAgB,cAAYU,OANfF,EADP,KAYf,C","sources":["Api/fetchApi.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'c5a1db41bd5eb56af64be0ab647b8aee';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const getTrendingMovies = async page => {\n  try {\n    return await axios.get(`trending/movie/day?`, {\n      params: {\n        api_key: API_KEY,\n        page,\n      },\n    });\n  } catch (error) {\n    throw new Error('Oops, something goes wrong!');\n  }\n};\n\nexport const getMoviesByKeyword = async (query, page) => {\n  try {\n    return await axios.get(`search/movie?`, {\n      params: {\n        api_key: API_KEY,\n        page,\n        query,\n      },\n    });\n  } catch (error) {\n    throw new Error('Oops, something goes wrong!');\n  }\n};\n\nexport async function getMovieById(movieId) {\n  try {\n    const movie = await axios.get(\n      `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n    return movie.data;\n  } catch (error) {\n    throw new Error('Oops, something goes wrong!');\n  }\n}\n\nexport async function getCast(movieId) {\n  try {\n    const cast = await axios.get(`movie/${movieId}/credits?api_key=${API_KEY}`);\n    return cast.data.cast;\n  } catch (error) {\n    throw new Error('Oops, something goes wrong!');\n  }\n}\n\nexport async function getReviews(movieId) {\n  try {\n    const reviews = await axios.get(\n      `movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    return reviews.data.results;\n  } catch (error) {\n    throw new Error('Oops, something goes wrong!');\n  }\n}\n\nexport function getPecentageValue(voteAverage) {\n  if (!voteAverage) {\n    return;\n  }\n  const percent = (voteAverage * 10).toFixed();\n  return `${percent}%`;\n}\n\nexport function getGenres(genres) {\n  if (!genres) {\n    return;\n  }\n  const allGenres = genres.map(genre => genre.name).join(', ');\n  return allGenres;\n}\n","import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: grid;\n  grid-auto-rows: auto;\n  grid-template-columns: repeat(6, 1fr);\n  gap: 15px;\n`;\n\nexport const CastItem = styled.li`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ActorPoster = styled.img`\n  min-height: 280px;\n  background-color: #dbdbdb;\n  border-radius: 10px;\n`;\n\nexport const ActorName = styled.p`\n  padding-top: 10px;\n  font-size: 16px;\n  font-weight: 600;\n`;\n\nexport const ActorCharacter = styled.p`\n  font-size: 14px;\n  padding-bottom: 10px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from '../../Api/fetchApi';\n\nimport {\n  CastList,\n  CastItem,\n  ActorPoster,\n  ActorName,\n  ActorCharacter,\n} from './Cast.styled';\n\nconst posterUrl = 'https://image.tmdb.org/t/p/w500';\nconst defaultImg =\n  'https://www.themoviedb.org/assets/2/v4/glyphicons/basic/glyphicons-basic-4-user-grey-d8fe957375e70239d6abdd549fd7568c89281b2179b5f4470e2e12895792dfa5.svg';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getMovieCast = async () => {\n      if (!movieId) return;\n      try {\n        const cast = await getCast(movieId);\n        setCast(cast);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getMovieCast();\n  }, [movieId]);\n  return (\n    <CastList>\n      {cast.map(({ id, profile_path, name, character }) => (\n        <CastItem key={id}>\n          <ActorPoster\n            src={profile_path ? `${posterUrl}${profile_path}` : defaultImg}\n            alt=\"Poster\"\n          />\n          <ActorName>{name}</ActorName>\n          <ActorCharacter>Character: {character}</ActorCharacter>\n        </CastItem>\n      ))}\n    </CastList>\n  );\n};\nexport default Cast;\n"],"names":["API_KEY","axios","getTrendingMovies","page","params","api_key","Error","getMoviesByKeyword","query","getMovieById","movieId","movie","data","getCast","cast","getReviews","reviews","results","getPecentageValue","voteAverage","percent","toFixed","getGenres","genres","map","genre","name","join","CastList","styled","CastItem","ActorPoster","ActorName","ActorCharacter","useState","setCast","useParams","useEffect","getMovieCast","console","log","id","profile_path","character","src","alt"],"sourceRoot":""}